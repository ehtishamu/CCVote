@page "/"

@using OfficeOpenXml
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JSRuntime
@using DinkToPdf
@using DinkToPdf.Contracts;
@inject PdfService PdfService

@inject HttpClient Http


<h3>Upload Excel File</h3>

<InputFile OnChange="ImportExcelFile" />

@if (KeyValuePairs != null)
{
    <table class="table table-striped">
        <thead>
            <tr>
                @foreach(var val in headersValues){
                <th>@val</th>
                }
                <th></th>
            </tr>
        </thead>
        <tbody>
            @{
                int index = 0;
            }
            @foreach (var dict in KeyValuePairs)
            {
                 var localvariable=index;
                index++;
                <tr>
                @foreach (var kvp in dict)
                {
                    
                        <td>@kvp.Value</td>
                 
                }
               
                    <td><button @onclick="() => GeneratePdf(dict,localvariable)">Generate Letter</button></td>
             
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Dictionary<string, string>[] KeyValuePairs { get; set; }
    private string[] headersValues { get; set; }

    public string TryGetValueFromDist(Dictionary<string, string> rowData, string key)
    {
        rowData.TryGetValue(key, out string colValue);
        return colValue;
    }

    async Task ImportExcelFile(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles(1))
        {
            try
            {
                using (MemoryStream ms = new MemoryStream())
                {
                    // copy data from file to memory stream
                    await file.OpenReadStream().CopyToAsync(ms);
                    // positions the cursor at the beginning of the memory stream
                    ms.Position = 0;

                    // create ExcelPackage from memory stream
                    ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                    using (ExcelPackage package = new ExcelPackage(ms))
                    {
                        ExcelWorksheet ws = package.Workbook.Worksheets.FirstOrDefault();
                        int colCount = ws.Dimension.End.Column;
                        int rowCount = ws.Dimension.End.Row;
                        var s = ws.Cells[2, 2].Value;
                        int rows = ws.Dimension.Rows;
                        int cols = ws.Dimension.Columns;

                        // Assuming the first row contains headers (keys)
                        var headers = new string[cols];
                        for (int col = 1; col <= cols; col++)
                        {
                            headers[col - 1] = ws.Cells[1, col].Text;
                        }
                        headersValues = headers;
                        KeyValuePairs = new Dictionary<string, string>[rows - 1];
                        for (int row = 2; row <= rows; row++) // Start from row 2 to skip headers
                        {
                            var kvp = new Dictionary<string, string>();
                            for (int col = 1; col <= cols; col++)
                            {
                                var key = headers[col - 1];
                                var value = ws.Cells[row, col].Text;
                                kvp.Add(key, value);
                            }
                            KeyValuePairs[row - 2] = kvp;
                        }
                        // rest of the code here...
                    }
                }
                await SendPostRequest();
            }
            catch (Exception ex)
            {
                throw;
            }
        }
    }



    public async Task GeneratePdf(Dictionary<string,string> dist, int i)
    {
        // Define the name variable
        string Name = TryGetValueFromDist(dist,"Name");
        string Address1 = TryGetValueFromDist(dist,"Address 1");
        string Address2 = TryGetValueFromDist(dist,"Address 2");
        string City = TryGetValueFromDist(dist,"City");
        string State = TryGetValueFromDist(dist,"State");
        string Zip = TryGetValueFromDist(dist,"Zip");
        string ShareNumber = TryGetValueFromDist(dist, "Share Number");
        string URL = TryGetValueFromDist(dist, "URL");


        string emailAddress = "ir@carecloud.com";
        string phone = "732-873-1351";

        string htmlContent = $@"
<!DOCTYPE html>
<html lang=""en"">

<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Document</title>
    <style>
        html {{ -webkit-print-color-adjust: exact; }}
        body {{
            margin: 0;
            padding: 0;
            line-height: 27px;
        }}

        .wordletter {{
            width: 1027px;
            margin: 0 auto;
        }}

        table {{
            width: 100%;
            font-size: 20px;
        }}
        .text-center{{
            text-align: center;
        }}
        ol li{{
            margin-bottom: 10px;
        }}
        ol{{
            background-color: #ccc;
        }}
        u{{
            font-weight: bold;
        }}
        ul li{{
            margin-bottom: 10px;
        }}
    </style>
</head>

<body>

    <div class=""wordletter"">
        <table>
            <tr>
                <td colspan=""3"">{Name}</td>
            </tr>
            <tr>
                <td colspan=""3"">{Address1}</td>
            </tr>
            <tr>
                <td>{City},{State} {Zip}</td>
            </tr>
        </table>

        <table style=""margin-top: 20px; vertical-align: top;"" align=""top"">
            <tr>
                <td width=""50"" style=""vertical-align: top;""><strong>Re:</strong></td>
                <td style=""vertical-align: top; width:600px;"">

                                <table>
                                    <tr>
                                        <td>CareCloud Series A Preferred Special Proxy Vote</td>
                                    </tr>
                                    <tr>
                                        <td>Shareholder: {Name}</td>
                                    </tr>
                                    <tr>
                                        <td>Number of shares entitled to vote: {ShareNumber}</td>
                                    </tr>
                                </table>

                </td>
                <td align=""right""  style=""vertical-align: top; text-align: center;"">
                    <table>
                        <tr>
                            <td>Vote Now</td>
                        </tr>
                        <tr>
                            <td><img width=""100"" src=""img{i}.jpg""></td>
                        </tr>
                        <tr>
                            <td><strong>SCAN HERE</strong></td>
                        </tr>
                    </table>
                </td>
            </tr>
        </table>

        <table >
            <tr>
                <td colspan=""2"">
                    <p>Dear {Name},</p>
                    <p>We are pleased to share with you that as of today 87% of your fellow Series A Preferred Shareholders
                        have submitted proxy votes in favor of both proposals being considered in the special proxy vote.
                        While there has been tremendous support a passing vote will require a minimum quorum which has not
                        yet been met – we are close but your vote is critical.</p>
                    <p>As you may have seen:</p>
                    <ul>
                        <li>Glass Lewis, a leading proxy vote advisory firm, recommends a vote <strong>“FOR”</strong> both proposals.</li>
                        <li>87% of Series A Shareholders indicated a vote <strong>“FOR”</strong> both proposals as of August 8, 2024.</li>
                        <li>For your vote to count you’ll need to vote <strong>“FOR”</strong> both proposals by <strong><u>August 21, 2024.</u></strong></li>
                    </ul>
                    <p style=""font-size: 25px;""><strong><u>How to Cast Your Vote:</u></strong></p>
                    <p>To ensure your vote is counted you have several options:</p>
                </td>
            </tr>
        </table>

        <table style=""background-color: #ccc;"">
            <tr>
                <td style=""background-color: #ccc;"">
                    <ol>
                        <li><u>Vote Securely Online:</u> Scan the above QR Code or visit &lt;URL&gt;.</li>
                        <li><u>Call to Vote:</u> You can vote by phone now or reach out with questions regarding the voting process at<br> 844-874-6164.</li>
                        <li><u>Send an Email:</u> Send an email today to carecloud@allianceadvisors.com indicating that you would like to vote and then you will receive voting instructions.</li>
                    </ol>
                </td>
            </tr>
        </table>

        <table>
            <tr>
                <td colspan=""2"">
                    <p>To learn more about the special proxy, it is important that you review the Series A Preferred special
                        proxy filings carefully, which are available on the SEC’s website and at <a
                            href=""https://ir.carecloud.com/series-a-special-proxy"">https://ir.carecloud.com/series-a-special-proxy</a>.
                    </p>
                    <p>Please don’t hesitate to contact me via email (<a
                            href=""mailto:{emailAddress}"">{emailAddress}</a>) or on my cell ({phone}) if I can be of any assistance. Thank you for your continued support of CareCloud.</p>
                    <p>Sincerely,</p>
                    <p>Stephen A. Snyder<br />President</p>
                </td>
            </tr>
        </table>
    </div>

</body>

</html>";



        await JSRuntime.InvokeVoidAsync("htmlToPdf", htmlContent, "sample.pdf");

    }

    private async Task DownloadFile(byte[] fileBytes, string fileName)
    {
        var base64 = Convert.ToBase64String(fileBytes);


        await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", base64, fileName);
    }

    private async Task SendPostRequest()
    {
        var url = "https://localhost:7029/api/QR";

        var requestData = KeyValuePairs;

        try
        {
            var response = await Http.PostAsJsonAsync(url, requestData);
            if (response.IsSuccessStatusCode)
            {
               var responseMessage = await response.Content.ReadAsStringAsync();
            }
            else
            {
               var responseMessage = $"Error: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            var responseMessage = $"Exception: {ex.Message}";
        }
    }
}

