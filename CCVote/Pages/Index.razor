@page "/"

@using OfficeOpenXml
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JSRuntime
@using DinkToPdf
@using DinkToPdf.Contracts;
@using System.Globalization
@inject PdfService PdfService

@inject HttpClient Http


<h3>Upload Excel File</h3>

<InputFile OnChange="ImportExcelFile" />

@if (KeyValuePairs != null)
{
    @if (!string.IsNullOrEmpty(pdfFileUrl))
{
    <p>PDF created! <a href="@pdfFileUrl" >Download PDF</a></p>
}
  @*   <button @onclick="() => GenerateAll()">Generate All Letter</button> *@
    <button @onclick="() => SendEmailPostRequest()">Send Email</button>

    
    <table class="table table-striped">
        <thead>
            <tr>
                 <th>index</th>
                @foreach(var val in headersValues){
                <th>@val</th>
                }
                <th></th>
            </tr>
        </thead>
        <tbody>
            @{
                int index = 0;
            }
            @foreach (var dict in KeyValuePairs)
            {
                var ind = 0;
                var localvariable=index;
                index++;
                <tr>

                @foreach (var kvp in dict)
                {
                        ind++;
                        @if(ind == 1)
                        {
                            <td>@localvariable</td>
                        }
                        
                        <td>@kvp.Value</td>         
                }
               
@*                     <td><button @onclick="() => GeneratePdf(dict,localvariable)">Generate Letter</button></td>*@             
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Dictionary<string, string>[] KeyValuePairs { get; set; }
    private string[] headersValues { get; set; }
    private string pdfFileUrl;
    private string htmlAll = "";
    public string TryGetValueFromDist(Dictionary<string, string> rowData, string key)
    {
        rowData.TryGetValue(key, out string colValue);
        return colValue;
    }

    async Task ImportExcelFile(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles(1))
        {
            try
            {
                using (MemoryStream ms = new MemoryStream())
                {
                    // copy data from file to memory stream
                    await file.OpenReadStream().CopyToAsync(ms);
                    // positions the cursor at the beginning of the memory stream
                    ms.Position = 0;

                    // create ExcelPackage from memory stream
                    ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                    using (ExcelPackage package = new ExcelPackage(ms))
                    {
                        ExcelWorksheet ws = package.Workbook.Worksheets.FirstOrDefault();
                        int colCount = ws.Dimension.End.Column;
                        int rowCount = ws.Dimension.End.Row;

                        var s = ws.Cells[2, 2].Value;
                        int rows = ws.Dimension.Rows;
                        int cols = ws.Dimension.Columns;

                        // Assuming the first row contains headers (keys)
                        var headers = new string[cols];
                        for (int col = 1; col <= cols; col++)
                        {
                            headers[col - 1] = ws.Cells[1, col].Text;
                        }
                        headersValues = headers;
                        KeyValuePairs = new Dictionary<string, string>[rows - 1];
                        for (int row = 2; row <= rows; row++) // Start from row 2 to skip headers
                        {
                            var kvp = new Dictionary<string, string>();
                            for (int col = 1; col <= cols; col++)
                            {
                                var key = headers[col - 1];
                                var value = ws.Cells[row, col].Text;
                                kvp.Add(key, value);
                            }
                            KeyValuePairs[row - 2] = kvp;
                        }
                        // rest of the code here...
                    }
                }
                await SendPostRequest();
            }
            catch (Exception ex)
            {
                throw;
            }
        }
    }



    public async Task GeneratePdf(Dictionary<string,string> dist, int i)
    {
        string Name = TryGetValueFromDist(dist, "First") + " " + TryGetValueFromDist(dist, "Last");
        string Address1 = TryGetValueFromDist(dist, "Street");
        string Address2 = TryGetValueFromDist(dist, "Address 2");
        string City = TryGetValueFromDist(dist, "City");
        string State = TryGetValueFromDist(dist, "State");
        string Zip = TryGetValueFromDist(dist, "Zip");
        string ShareNumber = TryGetValueFromDist(dist, "Shares");
        string URL = TryGetValueFromDist(dist, "Link");


        string emailAddress = "ir@carecloud.com";
        string phone = "732-873-1351";

        string htmlContent = $@"
<!DOCTYPE html>
<html lang=""en"">

<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Document</title>
    <style>
@media
screen {{   html {{ -webkit-print-color-adjust: exact; }}
        body {{
            margin: 0;
            padding: 0;
            line-height: 18px;
            font-size: 14px;
            text-align: justify;
            font-family: ""Times New Roman"", Times, serif;
        }}
        .jspdf-only {{     display: none; }}

        .wordletter {{
            width: 1027px;
            margin: 0 auto;
        }}

        table {{
            width: 100%;
            font-size: 14px;
            text-align: justify;
        }}
        .text-center{{
            text-align: center;
        }}
        ol li{{
            margin-bottom: 20px;
        }}
        ol{{
            background-color: #ccc;
        }}
        u{{
            font-weight: bold;
        }}
        ul li{{
            margin-bottom: 10px;
        }}
        p{{
            margin-bottom: 5px;
        }}}}
        html {{ -webkit-print-color-adjust: exact; }}
        body {{
            margin: 0;
            padding: 0;
            line-height: 18px;
            font-size: 14px;
            text-align: justify;
            font-family: ""Times New Roman"", Times, serif;
        }}
        .jspdf-only {{     display: none; }}

        .wordletter {{
            width: 1027px;
            margin: 0 auto;
        }}

        table {{
            width: 100%;
            font-size: 14px;
            text-align: justify;
        }}
        .text-center{{
            text-align: center;
        }}
        ol li{{
            margin-bottom: 20px;
        }}
        ol{{
            background-color: #ccc;
        }}
        u{{
            font-weight: bold;
        }}
        ul li{{
            margin-bottom: 10px;
        }}
        p{{
            margin-bottom: 5px;
        }}
    </style>
</head>

<body>
<table align=""center"" class=""text-center"">
<tr>
<td align=""center"">
<img style=""margin: 0 auto;"" width=""250"" src=""https://localhost:7018/carecloud.png"">
</td>
</tr>
</table>
<table style=""margin-top:15px;"">
  <tr>
                    <td width=""650"">
                            <table>

                                <tr>

                                    <td colspan=""3"" style=""line-height: 22px;font-size: 20px;"">{Name}</td>
                                </tr>
                                <tr>

                                    <td style=""line-height: 22px;font-size: 20px;"" colspan=""3"">{Address1}</td>
                                </tr>
                                <tr>

                                    <td style=""line-height: 22px;font-size: 20px;"" colspan=""3"">{City},{State} {Zip}</td>

                                </tr>
                                <tr style=""vertical-align: top;"">
                                    <td style=""line-height: 22px;font-size: 20px; text-align:left;"" width=""50"" align=""left"" style=""vertical-align: top;""><strong style=""margin-top:27px; vertical-align: top; display:block"">Re:</strong></td>
                                    <td style=""line-height: 22px;font-size: 20px;"">

                                        <table style=""margin-top:25px; vertical-align: top;"">
                                            <tr>
                                                <td style=""line-height: 22px;font-size: 20px;"">CareCloud Series A Preferred Special Proxy Vote</td>
                                            </tr>
                                            <tr>
                                                <td style=""line-height: 22px;font-size: 20px;"">Shareholder: {Name}</td>
                                            </tr>
                                            <tr>
                                                <td style=""line-height: 22px;font-size: 20px;"">Number of shares entitled to vote: {ShareNumber}</td>
                                            </tr>
                                        </table>                         
                            </td>
                                </tr>
                            </table>
                    </td>
                    <td style=""line-height: 15px;font-size: 18px;"" width=""200"" align=""right"" style=""vertical-align: bottom; text-align: center;"">
                        <table>
                            <tr>
                                <td align=""center"" style=""line-height: 10px;font-size: 20px; text-align:center"">Vote Now</td>
                            </tr>
                            <tr>
                                <td align=""center"">  <img width=""150"" src=""img{i}.jpg""></td>
                            </tr>
                            <tr>
                                <td align=""center"" style=""line-height: 10px;font-size: 20px; text-align:center"" ><strong style=""line-height: 10px;font-size: 20px;"">SCAN HERE</strong></td>
                            </tr>
                        </table>

                    </td>
                </tr>

            </table>
     <table >
            <tr>
                <td style=""line-height: 22px;font-size: 20px; text-align: justify;""  colspan=""2""></br>
                    <p>Dear {Name},</p>
                    <p style = ""text-align: justify; line-height: 22px;font-size: 20px;"">We are pleased to share with you that as of today <strong><i>87%</i></strong> of your fellow Series A Preferred Shareholders
                        have submitted proxy votes in favor of both proposals being considered in the special proxy vote.
                        While there has been tremendous support, a passing vote will require a minimum quorum, which has not
                        yet been met – <i>we are close but your vote is critical.</i></p>
                    <p  style=""line-height: 22px;font-size: 20px;"">As you may have seen:</p>
                    <ul style=""style=""line-height: 22px;font-size: 20px;"""">
                        <li style=""line-height: 22px;font-size: 20px;""><i>Glass Lewis</i>, a leading proxy vote advisory firm, recommends a vote <strong>“FOR”</strong> both proposals.</li>
                        <li style=""line-height: 22px;font-size: 20px;""><i>87% of Series A Shareholders</i> indicated a vote <strong>“FOR”</strong> both proposals, as of August 8, 2024.</li>
                        <li style=""line-height: 22px;font-size: 20px;"">For your vote to count, you’ll need to vote <strong>“FOR”</strong> both proposals by <strong><i><u>August 21, 2024.</u></i></strong></li>
                    </ul>
                    <p style=""line-height: 18px;font-size: 23px; margin-bottom:4px;""><strong><u>How to Cast Your Vote:</u></strong></p>
                    <p style=""line-height: 22px;font-size: 20px; margin-bottom: 5px; margin-top:0px;"">To ensure your vote is counted you have several options:</p>
                </td>
            </tr>
        </table>

         <table style=""background-color: #d1f1fe; border:1px solid #009bde;"">
            <tr>
                <td style=""style=""line-height: 22px;font-size: 20px;"""" style=""background-color: #d1f1fe;"">
                    <ol>
                        <li style=""margin-bottom: 10px; line-height: 26px;font-size: 20px;""><strong><u style=""font-size: 23px; text-transform:uppercase; "">Vote Securely Online:</u></strong> Scan the above QR Code or visit:<br> <a style=""text-decoration:none"" href=""{URL}"">{URL}</a>.</li>
                        <li style=""margin-bottom: 10px; line-height: 26px;font-size: 20px;""><strong><u style=""font-size: 23px; text-transform:uppercase;"">Call to Vote:</u> </strong>You can vote by phone now or reach out with questions regarding the voting process at <strong>844-874-6164.</strong></li>
                        <li style=""line-height: 22px;font-size: 20px;""><strong><u style=""font-size: 23px; text-transform:uppercase;"">Send an Email:</u></strong> Send an email today to <a style=""text-decoration:none"" href=""mailto:carecloud@allianceadvisors.com"">carecloud@allianceadvisors.com</a> indicating that you would like to vote and then you will receive voting instructions.</li>
                    </ol>
                </td>
            </tr>
        </table>

         <table>
            <tr>
                <td style=""line-height: 22px;font-size: 20px;""colspan=""2"">
                    <p style = ""text-align: justify; margin-bottom: 0px; margin-top: 5px; line-height: 22px;font-size: 20px;"">To learn more about the special proxy, it is important that you review the Series A Preferred special
                        proxy filings carefully, which are available on the SEC’s website and at </p> 
                    <a style=""margin-bottom: 10px; display: block; text-decoration:none""  href=""https://ir.carecloud.com/series-a-special-proxy"">https://ir.carecloud.com/series-a-special-proxy</a>

                    <p style = ""line-height: 22px;font-size: 20px; text-align: justify; margin-bottom:25px !important; "">Please don’t hesitate to contact me via email (<a style=""text-decoration:none"" href=""mailto:{emailAddress}"">{emailAddress}</a>) or on my cell ({phone}) if I can be of any assistance. Thank you for your continued support of CareCloud.</p>

                <table style=""margin-top:10px;"">
                    <tr>
                        <td>
                         <p style=""line-height: 15px;font-size: 20px; margin-bottom: 10px;"">Sincerely,</p>
                    <p style=""margin-bottom: 0px; margin-top:5px;""><img style=""margin: 0 auto; width:auto; height: 40px; text-decoration:none""  src=""https://localhost:7018/signature.jpg""></p>
                    <p style=""line-height: 15px;font-size: 20px; margin-bottom: 5px; margin-top:0px;"">Stephen A. Snyder<br />President</p>
                        </td>    
                    </tr>
                </table>

                </td>
            </tr>
        </table>
    </div>

</body>

</html>";



        await JSRuntime.InvokeVoidAsync("htmlToPdf", htmlContent, "file"+i+".pdf");

    }

    private async Task DownloadFile(byte[] fileBytes, string fileName)
    {
        var base64 = Convert.ToBase64String(fileBytes);


        await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", base64, fileName);
    }

    private async Task GenerateAll()
    {
        var allhtmls = @"
<!DOCTYPE html>
<html lang=""en"">

<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Document</title>
    <style>



        html {{ -webkit-print-color-adjust: exact; }}
        body {{
            margin: 0;
            padding: 0;
           line-height: 18px;
            font-size: 14px;
            text-align: justify;
        }}
       .dinktopdf-only {{    display: none; }}
       .wordletter {{
            width: 1027px;
            margin: 0 auto;
        }}
        #page-break {{
        page-break-before: always; /* or 'page-break-after: always;' depending on the requirement */
    }}
        table {{
            width: 100%;
            font-size: 14px;
            text-align: justify;
        }}

        .text-center{{
            text-align: center;
        }}
        ol li{{
            margin-bottom: 20px;
        }}
        ol{{
            background-color: #ccc;
        }}
        u{{
            font-weight: bold;
        }}
        ul li{{
            margin-bottom: 10px;
        }}
        p{{
            margin-bottom: 5px;
        }}

        @media print {
                html {{ -webkit-print-color-adjust: exact; }}
        body {{
            margin: 0;
            padding: 0;
            line-height: 18px;
            font-size: 14px;
            text-align: justify;
            font-family: ""Times New Roman"", Times, serif;
        }}
       .wordletter {{
            width: 1027px;
            margin: 0 auto;
        }}
        #page-break {{
        page-break-before: always; /* or 'page-break-after: always;' depending on the requirement */
    }}
        table {{
            width: 100%;
            font-size: 20px;
            text-align: justify;
        }}
        .text-center{{
            text-align: center;
        }}
        ol li{{
            margin-bottom: 20px;
        }}
        ol{{
            background-color: #ccc;
        }}
        u{{
            font-weight: bold;
        }}
        ul li{{
            margin-bottom: 10px;
        }}
        p{{
            margin-bottom: 5px;
        }}
        }
    </style>
</head>

<body>";
        for (int i = 0; i < KeyValuePairs.Length; i++)
        {
            var dist = KeyValuePairs[i];
            // Define the name variable
            string Name = TryGetValueFromDist(dist, "First") + " " + TryGetValueFromDist(dist, "Last");
            string Address1 = TryGetValueFromDist(dist, "Street");
            string Address2 = TryGetValueFromDist(dist, "Address 2");
            string City = TryGetValueFromDist(dist, "City");
            string State = TryGetValueFromDist(dist, "State");
            string Zip = TryGetValueFromDist(dist, "Zip");
            string ShareNumber = TryGetValueFromDist(dist, "Shares");
            string URL = TryGetValueFromDist(dist, "Link");
            string emailAddress = "ir@carecloud.com";
            string phone = "732-873-1351";

            string htmlContent = $@"

      <div class=""wordletter"" >
<table align=""center"" class=""text-center"">
<tr>
<td align=""center"">
<img style=""margin: 0 auto;"" width=""250"" src=""https://localhost:7018/carecloud.png"">
</td>
</tr>
</table>
<table style=""margin-top:15px;"">
  <tr>
                    <td width=""650"">
                            <table>

                                <tr>

                                    <td colspan=""3"" style=""line-height: 22px;font-size: 20px; text-transform:titlecase;"">{ToTitleCase(Name.ToLower())}</td>
                                </tr>
                                <tr>

                                    <td style=""line-height: 22px;font-size: 20px; text-transform:titlecase;"" colspan=""3"">{ToTitleCase(Address1.ToLower())}</td>
                                </tr>
                                <tr>

                                    <td style=""line-height: 22px;font-size: 20px; "" colspan=""3"">{ToTitleCase(City.ToLower())},&nbsp;{State} {Zip}</td>

                                </tr>
                                <tr style=""vertical-align: top;"">
                                    <td style=""line-height: 22px;font-size: 20px; text-align:left;"" width=""50"" align=""left"" style=""vertical-align: top;""><strong style=""margin-top:27px; vertical-align: top; display:block"">Re:</strong></td>
                                    <td style=""line-height: 22px;font-size: 20px;"">

                                        <table style=""margin-top:25px; vertical-align: top;"">
                                            <tr>
                                                <td style=""line-height: 22px;font-size: 20px;"">CareCloud Series A Preferred Special Proxy Vote</td>
                                            </tr>
                                            <tr>
                                                <td style=""line-height: 22px;font-size: 20px; text-transform:titlecase;"">Shareholder: {ToTitleCase(Name.ToLower())}</td>
                                            </tr>
                                            <tr>
                                                <td style=""line-height: 22px;font-size: 20px;"">Number of shares entitled to vote: {ShareNumber}</td>
                                            </tr>
                                        </table>                         
                            </td>
                                </tr>
                            </table>
                    </td>
                    <td style=""line-height: 15px;font-size: 18px;"" width=""200"" align=""right"" style=""vertical-align: bottom; text-align: center;"">
                        <table>
                            <tr>
                                <td align=""center"" style=""line-height: 10px;font-size: 20px; text-align:center"">Vote Now</td>
                            </tr>
                            <tr>
                                <td align=""center"">  <img width=""150"" src=""https://localhost:7018/img{i}.jpg""></td>
                            </tr>
                            <tr>
                                <td align=""center"" style=""line-height: 10px;font-size: 20px; text-align:center"" ><strong style=""line-height: 10px;font-size: 20px;"">SCAN HERE</strong></td>
                            </tr>
                        </table>

                    </td>
                </tr>

            </table>
        <table >
            <tr>
                <td style=""line-height: 22px;font-size: 20px; text-align: justify;""  colspan=""2""></br>
                    <p style=""text-transform:titlecase;"">Dear {ToTitleCase(Name.ToLower())},</p>
                    <p style = ""text-align: justify; line-height: 22px;font-size: 20px;"">We are pleased to share with you that as of today <strong><i>87%</i></strong> of your fellow Series A Preferred Shareholders
                        have submitted proxy votes in favor of both proposals being considered in the special proxy vote.
                        While there has been tremendous support, a passing vote will require a minimum quorum, which has not
                        yet been met – <i>we are close but your vote is critical.</i></p>
                    <p  style=""line-height: 22px;font-size: 20px;"">As you may have seen:</p>
                    <ul style=""style=""line-height: 22px;font-size: 20px;"""">
                        <li style=""line-height: 22px;font-size: 20px;""><i>Glass Lewis</i>, a leading proxy vote advisory firm, recommends a vote <strong>“FOR”</strong> both proposals.</li>
                        <li style=""line-height: 22px;font-size: 20px;""><i>87% of Series A Shareholders</i> indicated a vote <strong>“FOR”</strong> both proposals, as of August 8, 2024.</li>
                        <li style=""line-height: 22px;font-size: 20px;"">For your vote to count, you’ll need to vote <strong>“FOR”</strong> both proposals by <strong><i><u>August 21, 2024.</u></i></strong></li>
                    </ul>
                    <p style=""line-height: 18px;font-size: 23px; margin-bottom:4px;""><strong><u>How to Cast Your Vote:</u></strong></p>
                    <p style=""line-height: 22px;font-size: 20px; margin-bottom: 5px; margin-top:0px;"">To ensure your vote is counted you have several options:</p>
                </td>
            </tr>
        </table>

        <table style=""background-color: #d1f1fe; border:1px solid #009bde;"">
            <tr>
                <td style=""style=""line-height: 22px;font-size: 20px;"""" style=""background-color: #d1f1fe;"">
                    <ol>
                        <li style=""margin-bottom: 10px; line-height: 26px;font-size: 20px;""><strong><u style=""font-size: 23px; text-transform:uppercase; "">Vote Securely Online:</u></strong> Scan the above QR Code or visit:<br> <a style=""text-decoration:none"" href=""{URL}"">{URL}</a>.</li>
                        <li style=""margin-bottom: 10px; line-height: 26px;font-size: 20px;""><strong><u style=""font-size: 23px; text-transform:uppercase;"">Call to Vote:</u> </strong>You can vote by phone now or reach out with questions regarding the voting process at <strong>844-874-6164.</strong></li>
                        <li style=""line-height: 22px;font-size: 20px;""><strong><u style=""font-size: 23px; text-transform:uppercase;"">Send an Email:</u></strong> Send an email today to <a style=""text-decoration:none"" href=""mailto:carecloud@allianceadvisors.com"">carecloud@allianceadvisors.com</a> indicating that you would like to vote and then you will receive voting instructions.</li>
                    </ol>
                </td>
            </tr>
        </table>

        <table>
            <tr>
                <td style=""line-height: 22px;font-size: 20px;""colspan=""2"">
                    <p style = ""text-align: justify; margin-bottom: 0px; margin-top: 5px; line-height: 22px;font-size: 20px;"">To learn more about the special proxy, it is important that you review the Series A Preferred special
                        proxy filings carefully, which are available on the SEC’s website and at </p> 
                    <a style=""margin-bottom: 10px; display: block; text-decoration:none""  href=""https://ir.carecloud.com/series-a-special-proxy"">https://ir.carecloud.com/series-a-special-proxy</a>

                    <p style = ""line-height: 22px;font-size: 20px; text-align: justify; margin-bottom:25px !important; "">Please don’t hesitate to contact me via email <a style=""text-decoration:none"" href=""mailto:{emailAddress}"">{emailAddress}</a> or on my cell {phone} if I can be of any assistance. Thank you for your continued support of CareCloud.</p>

                <table style=""margin-top:10px;"">
                    <tr>
                        <td>
                         <p style=""line-height: 15px;font-size: 20px; margin-bottom: 10px;"">Sincerely,</p>
                    <p style=""margin-bottom: 5px ; margin-top:5px;""><img style=""margin: 0 auto; width:auto; height: 40px; text-decoration:none""  src=""https://localhost:7018/signature.jpg""></p>
                    <p style=""line-height: 15px;font-size: 20px; margin-bottom: 10px; margin-top:0px;"">Stephen A. Snyder </p>
                    <p style=""line-height: 15px;font-size: 20px; margin-top:5px !important;"">President</p>
                        </td>    
                    </tr>
                </table>

                </td>
            </tr>
        </table>
    </div><div style=""display:block; clear:both; page-break-after: always;""></div>";

            allhtmls += htmlContent;

        }
        allhtmls += @"

</body>

</html>";
        htmlAll = allhtmls;
        await SendPostRequestHTML();
        // await JSRuntime.InvokeAsync<string>("open", $"{pdfFileUrl}", "_blank");
        //await JSRuntime.InvokeVoidAsync("openPdfInNewTab", pdfFileUrl);
        //await JSRuntime.InvokeVoidAsync("htmlToPdfAll", allhtmls, "allfile.pdf");

    }

    private async Task SendPostRequest()
    {
        var url = "https://localhost:7029/api/QR";

        var requestData = KeyValuePairs;

        try
        {
            var response = await Http.PostAsJsonAsync(url, requestData);
            if (response.IsSuccessStatusCode)
            {
                var responseMessage = await response.Content.ReadAsStringAsync();
            }
            else
            {
                var responseMessage = $"Error: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            var responseMessage = $"Exception: {ex.Message}";
        }
    }
    private string ToTitleCase(string input)
    {
        TextInfo textInfo = CultureInfo.CurrentCulture.TextInfo;
        return textInfo.ToTitleCase(input);
    }
    private async Task SendPostRequestHTML()
    {
        var url = "https://localhost:7029/api/QR/convert";
        var modeldata =new 
        {
            htmlContent=htmlAll
        };
        var requestData = modeldata;

        try
        {
            var response = await Http.PostAsJsonAsync(url, requestData);
            if (response.IsSuccessStatusCode)
            {
                var pdfBytes = await response.Content.ReadAsByteArrayAsync();

                // Create a URL for the PDF file
                pdfFileUrl = $"data:application/pdf;base64,{Convert.ToBase64String(pdfBytes)}";


            }
            else
            {
                var responseMessage = $"Error: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            var responseMessage = $"Exception: {ex.Message}";
        }
    }

    private async Task SendEmailPostRequest()
    {
        try
        {
            var requestData = KeyValuePairs;
            // Call the SendEmail API
            var response = await Http.PostAsJsonAsync("https://localhost:7029/api/Import/SendEmail",requestData);

            if (response.IsSuccessStatusCode)
            {
                // Optionally, handle the successful response
                var result = await response.Content.ReadAsStringAsync();
                Console.WriteLine("Email sent successfully!");
                // Navigate or display a success message as needed
            }
            else
            {
                // Handle failure
                Console.WriteLine("Failed to send email: " + response.ReasonPhrase);
            }
        }
        catch (Exception ex)
        {
            // Handle any exceptions
            Console.WriteLine("An error occurred: " + ex.Message);
        }
    }
    // private async Task SendEmail()
    // {
    //     try
    //     {
    //         // Call the SendEmail API
    //         var response = await Http.GetAsync("https://localhost:7029/api/Import/SendEmail");

    //         if (response.IsSuccessStatusCode)
    //         {
    //             // Optionally, handle the successful response
    //             var result = await response.Content.ReadAsStringAsync();
    //             Console.WriteLine("Email sent successfully!");
    //             // Navigate or display a success message as needed
    //         }
    //         else
    //         {
    //             // Handle failure
    //             Console.WriteLine("Failed to send email: " + response.ReasonPhrase);
    //         }
    //     }
    //     catch (Exception ex)
    //     {
    //         // Handle any exceptions
    //         Console.WriteLine("An error occurred: " + ex.Message);
    //     }
    // }
}

